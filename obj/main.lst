                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _moveSaucer
                             13 	.globl _enemySaucerHitsBorder
                             14 	.globl _initSprites
                             15 	.globl _draw_sp_vshot
                             16 	.globl _draw_sp_enemy_saucer
                             17 	.globl _draw_sp_player
                             18 	.globl _drawSprite
                             19 	.globl _cpct_getScreenPtr
                             20 	.globl _cpct_setPALColour
                             21 	.globl _cpct_setPalette
                             22 	.globl _cpct_waitVSYNC
                             23 	.globl _cpct_setVideoMode
                             24 	.globl _cpct_drawSprite
                             25 	.globl _cpct_isKeyPressed
                             26 	.globl _cpct_scanKeyboard
                             27 	.globl _cpct_disableFirmware
                             28 	.globl _sp_enemy_saucer_speed
                             29 	.globl _sp_enemy_saucer_y
                             30 	.globl _sp_enemy_saucer_x
                             31 	.globl _sp_vshot_y_speed
                             32 	.globl _sp_vshot_y
                             33 	.globl _sp_vshot_x
                             34 	.globl _sp_player_ship_speed
                             35 	.globl _sp_player_ship_y
                             36 	.globl _sp_player_ship_x
                             37 ;--------------------------------------------------------
                             38 ; special function registers
                             39 ;--------------------------------------------------------
                             40 ;--------------------------------------------------------
                             41 ; ram data
                             42 ;--------------------------------------------------------
                             43 	.area _DATA
   0000                      44 _sp_player_ship_x::
   0000                      45 	.ds 1
   0001                      46 _sp_player_ship_y::
   0001                      47 	.ds 1
   0002                      48 _sp_player_ship_speed::
   0002                      49 	.ds 1
   0003                      50 _sp_vshot_x::
   0003                      51 	.ds 1
   0004                      52 _sp_vshot_y::
   0004                      53 	.ds 1
   0005                      54 _sp_vshot_y_speed::
   0005                      55 	.ds 1
   0006                      56 _sp_enemy_saucer_x::
   0006                      57 	.ds 1
   0007                      58 _sp_enemy_saucer_y::
   0007                      59 	.ds 1
   0008                      60 _sp_enemy_saucer_speed::
   0008                      61 	.ds 1
                             62 ;--------------------------------------------------------
                             63 ; ram data
                             64 ;--------------------------------------------------------
                             65 	.area _INITIALIZED
                             66 ;--------------------------------------------------------
                             67 ; absolute external ram data
                             68 ;--------------------------------------------------------
                             69 	.area _DABS (ABS)
                             70 ;--------------------------------------------------------
                             71 ; global & static initialisations
                             72 ;--------------------------------------------------------
                             73 	.area _HOME
                             74 	.area _GSINIT
                             75 	.area _GSFINAL
                             76 	.area _GSINIT
                             77 ;--------------------------------------------------------
                             78 ; Home
                             79 ;--------------------------------------------------------
                             80 	.area _HOME
                             81 	.area _HOME
                             82 ;--------------------------------------------------------
                             83 ; code
                             84 ;--------------------------------------------------------
                             85 	.area _CODE
                             86 ;src/main.c:50: void drawSprite(u8 *sprite,int x,int y,int sprite_width,int sprite_height)
                             87 ;	---------------------------------
                             88 ; Function drawSprite
                             89 ; ---------------------------------
   0000                      90 _drawSprite::
   0000 DD E5         [15]   91 	push	ix
   0002 DD 21 00 00   [14]   92 	ld	ix,#0
   0006 DD 39         [15]   93 	add	ix,sp
                             94 ;src/main.c:53: pvmem = cpct_getScreenPtr(CPCT_VMEM_START,x,y);
   0008 DD 56 08      [19]   95 	ld	d, 8 (ix)
   000B DD 5E 06      [19]   96 	ld	e, 6 (ix)
   000E D5            [11]   97 	push	de
   000F 21 00 C0      [10]   98 	ld	hl, #0xc000
   0012 E5            [11]   99 	push	hl
   0013 CDr00r00      [17]  100 	call	_cpct_getScreenPtr
   0016 EB            [ 4]  101 	ex	de,hl
                            102 ;src/main.c:54: cpct_drawSprite(sprite,pvmem,sprite_width,sprite_height);
   0017 DD 66 0C      [19]  103 	ld	h, 12 (ix)
   001A DD 4E 0A      [19]  104 	ld	c, 10 (ix)
   001D DD 6E 04      [19]  105 	ld	l, 4 (ix)
   0020 DD 46 05      [19]  106 	ld	b, 5 (ix)
   0023 E5            [11]  107 	push	hl
   0024 33            [ 6]  108 	inc	sp
   0025 79            [ 4]  109 	ld	a, c
   0026 F5            [11]  110 	push	af
   0027 33            [ 6]  111 	inc	sp
   0028 D5            [11]  112 	push	de
   0029 60            [ 4]  113 	ld	h, b
   002A E5            [11]  114 	push	hl
   002B CDr00r00      [17]  115 	call	_cpct_drawSprite
   002E DD E1         [14]  116 	pop	ix
   0030 C9            [10]  117 	ret
                            118 ;src/main.c:58: void draw_sp_player(u8 x,u8 y)
                            119 ;	---------------------------------
                            120 ; Function draw_sp_player
                            121 ; ---------------------------------
   0031                     122 _draw_sp_player::
   0031 DD E5         [15]  123 	push	ix
   0033 DD 21 00 00   [14]  124 	ld	ix,#0
   0037 DD 39         [15]  125 	add	ix,sp
                            126 ;src/main.c:60: drawSprite (sp_player_ship,x,y,SP_PLAYER_SHIP_W,SP_PLAYER_SHIP_H);
   0039 DD 5E 05      [19]  127 	ld	e, 5 (ix)
   003C 16 00         [ 7]  128 	ld	d, #0x00
   003E DD 4E 04      [19]  129 	ld	c, 4 (ix)
   0041 06 00         [ 7]  130 	ld	b, #0x00
   0043 21 0E 00      [10]  131 	ld	hl, #0x000e
   0046 E5            [11]  132 	push	hl
   0047 2E 08         [ 7]  133 	ld	l, #0x08
   0049 E5            [11]  134 	push	hl
   004A D5            [11]  135 	push	de
   004B C5            [11]  136 	push	bc
   004C 21r00r00      [10]  137 	ld	hl, #_sp_player_ship
   004F E5            [11]  138 	push	hl
   0050 CDr00r00      [17]  139 	call	_drawSprite
   0053 21 0A 00      [10]  140 	ld	hl, #10
   0056 39            [11]  141 	add	hl, sp
   0057 F9            [ 6]  142 	ld	sp, hl
   0058 DD E1         [14]  143 	pop	ix
   005A C9            [10]  144 	ret
                            145 ;src/main.c:63: void draw_sp_enemy_saucer(u8 x,u8 y)
                            146 ;	---------------------------------
                            147 ; Function draw_sp_enemy_saucer
                            148 ; ---------------------------------
   005B                     149 _draw_sp_enemy_saucer::
   005B DD E5         [15]  150 	push	ix
   005D DD 21 00 00   [14]  151 	ld	ix,#0
   0061 DD 39         [15]  152 	add	ix,sp
                            153 ;src/main.c:65: drawSprite (sp_enemy_saucer,x,y,SP_ENEMY_SAUCER_W,SP_ENEMY_SAUCER_H);
   0063 DD 5E 05      [19]  154 	ld	e, 5 (ix)
   0066 16 00         [ 7]  155 	ld	d, #0x00
   0068 DD 4E 04      [19]  156 	ld	c, 4 (ix)
   006B 06 00         [ 7]  157 	ld	b, #0x00
   006D 21 10 00      [10]  158 	ld	hl, #0x0010
   0070 E5            [11]  159 	push	hl
   0071 2E 0E         [ 7]  160 	ld	l, #0x0e
   0073 E5            [11]  161 	push	hl
   0074 D5            [11]  162 	push	de
   0075 C5            [11]  163 	push	bc
   0076 21r00r00      [10]  164 	ld	hl, #_sp_enemy_saucer
   0079 E5            [11]  165 	push	hl
   007A CDr00r00      [17]  166 	call	_drawSprite
   007D 21 0A 00      [10]  167 	ld	hl, #10
   0080 39            [11]  168 	add	hl, sp
   0081 F9            [ 6]  169 	ld	sp, hl
   0082 DD E1         [14]  170 	pop	ix
   0084 C9            [10]  171 	ret
                            172 ;src/main.c:67: void draw_sp_vshot(u8 x,u8 y)
                            173 ;	---------------------------------
                            174 ; Function draw_sp_vshot
                            175 ; ---------------------------------
   0085                     176 _draw_sp_vshot::
   0085 DD E5         [15]  177 	push	ix
   0087 DD 21 00 00   [14]  178 	ld	ix,#0
   008B DD 39         [15]  179 	add	ix,sp
                            180 ;src/main.c:69: drawSprite (sp_vshot,x,y,SP_VSHOT_W,SP_VSHOT_H);
   008D DD 5E 05      [19]  181 	ld	e, 5 (ix)
   0090 16 00         [ 7]  182 	ld	d, #0x00
   0092 DD 4E 04      [19]  183 	ld	c, 4 (ix)
   0095 06 00         [ 7]  184 	ld	b, #0x00
   0097 21 06 00      [10]  185 	ld	hl, #0x0006
   009A E5            [11]  186 	push	hl
   009B 2E 01         [ 7]  187 	ld	l, #0x01
   009D E5            [11]  188 	push	hl
   009E D5            [11]  189 	push	de
   009F C5            [11]  190 	push	bc
   00A0 21r00r00      [10]  191 	ld	hl, #_sp_vshot
   00A3 E5            [11]  192 	push	hl
   00A4 CDr00r00      [17]  193 	call	_drawSprite
   00A7 21 0A 00      [10]  194 	ld	hl, #10
   00AA 39            [11]  195 	add	hl, sp
   00AB F9            [ 6]  196 	ld	sp, hl
   00AC DD E1         [14]  197 	pop	ix
   00AE C9            [10]  198 	ret
                            199 ;src/main.c:72: void initSprites()
                            200 ;	---------------------------------
                            201 ; Function initSprites
                            202 ; ---------------------------------
   00AF                     203 _initSprites::
                            204 ;src/main.c:74: sp_player_ship_x = (SCREEN_RIGHT/2) - (SP_PLAYER_SHIP_W);
   00AF 21r00r00      [10]  205 	ld	hl,#_sp_player_ship_x + 0
   00B2 36 20         [10]  206 	ld	(hl), #0x20
                            207 ;src/main.c:75: sp_player_ship_y = SCREEN_BOTTOM-SP_PLAYER_SHIP_H;
   00B4 21r01r00      [10]  208 	ld	hl,#_sp_player_ship_y + 0
   00B7 36 BA         [10]  209 	ld	(hl), #0xba
                            210 ;src/main.c:76: draw_sp_player(sp_player_ship_x,sp_player_ship_y);
   00B9 21 20 BA      [10]  211 	ld	hl, #0xba20
   00BC E5            [11]  212 	push	hl
   00BD CDr31r00      [17]  213 	call	_draw_sp_player
   00C0 F1            [10]  214 	pop	af
                            215 ;src/main.c:78: sp_vshot_x = (SCREEN_RIGHT/2) - (SP_PLAYER_SHIP_W/2) - SP_VSHOT_W;
   00C1 21r03r00      [10]  216 	ld	hl,#_sp_vshot_x + 0
   00C4 36 23         [10]  217 	ld	(hl), #0x23
                            218 ;src/main.c:79: sp_vshot_y = SCREEN_BOTTOM - SP_PLAYER_SHIP_H - SP_VSHOT_H;
   00C6 21r04r00      [10]  219 	ld	hl,#_sp_vshot_y + 0
   00C9 36 B4         [10]  220 	ld	(hl), #0xb4
                            221 ;src/main.c:80: draw_sp_vshot(sp_vshot_x,sp_vshot_y);
   00CB 21 23 B4      [10]  222 	ld	hl, #0xb423
   00CE E5            [11]  223 	push	hl
   00CF CDr85r00      [17]  224 	call	_draw_sp_vshot
   00D2 F1            [10]  225 	pop	af
                            226 ;src/main.c:82: sp_enemy_saucer_x = SCREEN_RIGHT - SP_ENEMY_SAUCER_W;
   00D3 21r06r00      [10]  227 	ld	hl,#_sp_enemy_saucer_x + 0
   00D6 36 42         [10]  228 	ld	(hl), #0x42
                            229 ;src/main.c:83: sp_enemy_saucer_y = SCREEN_TOP + SCREEN_FRAME;
   00D8 21r07r00      [10]  230 	ld	hl,#_sp_enemy_saucer_y + 0
   00DB 36 01         [10]  231 	ld	(hl), #0x01
                            232 ;src/main.c:84: sp_enemy_saucer_speed = -2;
   00DD 21r08r00      [10]  233 	ld	hl,#_sp_enemy_saucer_speed + 0
   00E0 36 FE         [10]  234 	ld	(hl), #0xfe
                            235 ;src/main.c:85: draw_sp_enemy_saucer(sp_enemy_saucer_x,sp_enemy_saucer_y);
   00E2 21 42 01      [10]  236 	ld	hl, #0x0142
   00E5 E5            [11]  237 	push	hl
   00E6 CDr5Br00      [17]  238 	call	_draw_sp_enemy_saucer
   00E9 F1            [10]  239 	pop	af
   00EA C9            [10]  240 	ret
                            241 ;src/main.c:88: u8 enemySaucerHitsBorder()
                            242 ;	---------------------------------
                            243 ; Function enemySaucerHitsBorder
                            244 ; ---------------------------------
   00EB                     245 _enemySaucerHitsBorder::
                            246 ;src/main.c:90: u8 hitLeftBorder = (sp_enemy_saucer_x <= SCREEN_LEFT);
   00EB FD 21r06r00   [14]  247 	ld	iy, #_sp_enemy_saucer_x
   00EF FD 7E 00      [19]  248 	ld	a, 0 (iy)
   00F2 D6 01         [ 7]  249 	sub	a,#0x01
   00F4 3E 00         [ 7]  250 	ld	a, #0x00
   00F6 17            [ 4]  251 	rla
   00F7 4F            [ 4]  252 	ld	c, a
                            253 ;src/main.c:91: u8 hitRightBorder = ((sp_enemy_saucer_x + SP_ENEMY_SAUCER_W) >= SCREEN_RIGHT );
   00F8 FD 5E 00      [19]  254 	ld	e, 0 (iy)
   00FB 16 00         [ 7]  255 	ld	d, #0x00
   00FD 21 0E 00      [10]  256 	ld	hl, #0x000e
   0100 19            [11]  257 	add	hl, de
   0101 11 50 80      [10]  258 	ld	de, #0x8050
   0104 29            [11]  259 	add	hl, hl
   0105 3F            [ 4]  260 	ccf
   0106 CB 1C         [ 8]  261 	rr	h
   0108 CB 1D         [ 8]  262 	rr	l
   010A ED 52         [15]  263 	sbc	hl, de
   010C 3E 00         [ 7]  264 	ld	a, #0x00
   010E 17            [ 4]  265 	rla
   010F EE 01         [ 7]  266 	xor	a, #0x01
   0111 47            [ 4]  267 	ld	b, a
                            268 ;src/main.c:92: return ( hitLeftBorder || hitRightBorder );
   0112 79            [ 4]  269 	ld	a, c
   0113 B7            [ 4]  270 	or	a,a
   0114 20 05         [12]  271 	jr	NZ,00104$
   0116 B0            [ 4]  272 	or	a,b
   0117 20 02         [12]  273 	jr	NZ,00104$
   0119 6F            [ 4]  274 	ld	l,a
   011A C9            [10]  275 	ret
   011B                     276 00104$:
   011B 2E 01         [ 7]  277 	ld	l, #0x01
   011D C9            [10]  278 	ret
                            279 ;src/main.c:95: void moveSaucer()
                            280 ;	---------------------------------
                            281 ; Function moveSaucer
                            282 ; ---------------------------------
   011E                     283 _moveSaucer::
                            284 ;src/main.c:97: if (enemySaucerHitsBorder())
   011E CDrEBr00      [17]  285 	call	_enemySaucerHitsBorder
   0121 7D            [ 4]  286 	ld	a, l
   0122 B7            [ 4]  287 	or	a, a
   0123 28 0B         [12]  288 	jr	Z,00102$
                            289 ;src/main.c:98: sp_enemy_saucer_speed = -sp_enemy_saucer_speed;
   0125 AF            [ 4]  290 	xor	a, a
   0126 FD 21r08r00   [14]  291 	ld	iy, #_sp_enemy_saucer_speed
   012A FD 96 00      [19]  292 	sub	a, 0 (iy)
   012D FD 77 00      [19]  293 	ld	0 (iy), a
   0130                     294 00102$:
                            295 ;src/main.c:100: sp_enemy_saucer_x += sp_enemy_saucer_speed;
   0130 21r08r00      [10]  296 	ld	hl, #_sp_enemy_saucer_speed
   0133 D5            [11]  297 	push	de
   0134 FD 21r06r00   [14]  298 	ld	iy, #_sp_enemy_saucer_x
   0138 FD E5         [15]  299 	push	iy
   013A D1            [10]  300 	pop	de
   013B 1A            [ 7]  301 	ld	a, (de)
   013C 86            [ 7]  302 	add	a, (hl)
   013D 12            [ 7]  303 	ld	(de), a
   013E D1            [10]  304 	pop	de
                            305 ;src/main.c:101: draw_sp_enemy_saucer(sp_enemy_saucer_x,sp_enemy_saucer_y);
   013F 3Ar07r00      [13]  306 	ld	a, (_sp_enemy_saucer_y)
   0142 F5            [11]  307 	push	af
   0143 33            [ 6]  308 	inc	sp
   0144 3Ar06r00      [13]  309 	ld	a, (_sp_enemy_saucer_x)
   0147 F5            [11]  310 	push	af
   0148 33            [ 6]  311 	inc	sp
   0149 CDr5Br00      [17]  312 	call	_draw_sp_enemy_saucer
   014C F1            [10]  313 	pop	af
   014D C9            [10]  314 	ret
                            315 ;src/main.c:105: void main(void) 
                            316 ;	---------------------------------
                            317 ; Function main
                            318 ; ---------------------------------
   014E                     319 _main::
                            320 ;src/main.c:114: cpct_disableFirmware();
   014E CDr00r00      [17]  321 	call	_cpct_disableFirmware
                            322 ;src/main.c:116: cpct_setVideoMode(0);
   0151 2E 00         [ 7]  323 	ld	l, #0x00
   0153 CDr00r00      [17]  324 	call	_cpct_setVideoMode
                            325 ;src/main.c:117: cpct_setPalette(g_palette, 16);
   0156 21 10 00      [10]  326 	ld	hl, #0x0010
   0159 E5            [11]  327 	push	hl
   015A 21r00r00      [10]  328 	ld	hl, #_g_palette
   015D E5            [11]  329 	push	hl
   015E CDr00r00      [17]  330 	call	_cpct_setPalette
                            331 ;src/main.c:118: cpct_setBorder(HW_BLACK);
   0161 21 10 14      [10]  332 	ld	hl, #0x1410
   0164 E5            [11]  333 	push	hl
   0165 CDr00r00      [17]  334 	call	_cpct_setPALColour
                            335 ;src/main.c:120: initSprites();
   0168 CDrAFr00      [17]  336 	call	_initSprites
                            337 ;src/main.c:125: while (TRUE)
   016B                     338 00110$:
                            339 ;src/main.c:127: moveSaucer();
   016B CDr1Er01      [17]  340 	call	_moveSaucer
                            341 ;src/main.c:128: cpct_scanKeyboard();
   016E CDr00r00      [17]  342 	call	_cpct_scanKeyboard
                            343 ;src/main.c:130: if (cpct_isKeyPressed (Key_P))
   0171 21 03 08      [10]  344 	ld	hl, #0x0803
   0174 CDr00r00      [17]  345 	call	_cpct_isKeyPressed
   0177 7D            [ 4]  346 	ld	a, l
   0178 B7            [ 4]  347 	or	a, a
   0179 28 2B         [12]  348 	jr	Z,00104$
                            349 ;src/main.c:132: if (sp_player_ship_x + SP_PLAYER_SHIP_W < SCREEN_RIGHT)
   017B FD 21r00r00   [14]  350 	ld	iy, #_sp_player_ship_x
   017F FD 4E 00      [19]  351 	ld	c, 0 (iy)
   0182 06 00         [ 7]  352 	ld	b, #0x00
   0184 21 08 00      [10]  353 	ld	hl, #0x0008
   0187 09            [11]  354 	add	hl, bc
   0188 11 50 80      [10]  355 	ld	de, #0x8050
   018B 29            [11]  356 	add	hl, hl
   018C 3F            [ 4]  357 	ccf
   018D CB 1C         [ 8]  358 	rr	h
   018F CB 1D         [ 8]  359 	rr	l
   0191 ED 52         [15]  360 	sbc	hl, de
   0193 30 11         [12]  361 	jr	NC,00104$
                            362 ;src/main.c:134: ++sp_player_ship_x;
   0195 FD 34 00      [23]  363 	inc	0 (iy)
                            364 ;src/main.c:135: draw_sp_player(sp_player_ship_x,sp_player_ship_y);
   0198 3Ar01r00      [13]  365 	ld	a, (_sp_player_ship_y)
   019B F5            [11]  366 	push	af
   019C 33            [ 6]  367 	inc	sp
   019D 3Ar00r00      [13]  368 	ld	a, (_sp_player_ship_x)
   01A0 F5            [11]  369 	push	af
   01A1 33            [ 6]  370 	inc	sp
   01A2 CDr31r00      [17]  371 	call	_draw_sp_player
   01A5 F1            [10]  372 	pop	af
   01A6                     373 00104$:
                            374 ;src/main.c:140: if (cpct_isKeyPressed (Key_O))
   01A6 21 04 04      [10]  375 	ld	hl, #0x0404
   01A9 CDr00r00      [17]  376 	call	_cpct_isKeyPressed
   01AC 7D            [ 4]  377 	ld	a, l
   01AD B7            [ 4]  378 	or	a, a
   01AE 28 1B         [12]  379 	jr	Z,00108$
                            380 ;src/main.c:142: if (sp_player_ship_x > SCREEN_LEFT)
   01B0 FD 21r00r00   [14]  381 	ld	iy, #_sp_player_ship_x
   01B4 FD 7E 00      [19]  382 	ld	a, 0 (iy)
   01B7 B7            [ 4]  383 	or	a, a
   01B8 28 11         [12]  384 	jr	Z,00108$
                            385 ;src/main.c:144: --sp_player_ship_x;
   01BA FD 35 00      [23]  386 	dec	0 (iy)
                            387 ;src/main.c:145: draw_sp_player(sp_player_ship_x,sp_player_ship_y);
   01BD 3Ar01r00      [13]  388 	ld	a, (_sp_player_ship_y)
   01C0 F5            [11]  389 	push	af
   01C1 33            [ 6]  390 	inc	sp
   01C2 3Ar00r00      [13]  391 	ld	a, (_sp_player_ship_x)
   01C5 F5            [11]  392 	push	af
   01C6 33            [ 6]  393 	inc	sp
   01C7 CDr31r00      [17]  394 	call	_draw_sp_player
   01CA F1            [10]  395 	pop	af
   01CB                     396 00108$:
                            397 ;src/main.c:149: cpct_waitVSYNC();
   01CB CDr00r00      [17]  398 	call	_cpct_waitVSYNC
   01CE 18 9B         [12]  399 	jr	00110$
                            400 	.area _CODE
                            401 	.area _INITIALIZER
                            402 	.area _CABS (ABS)
